// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../src/app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             Int              @id @default(autoincrement())
  email          String           @unique
  username       String           @unique
  password       String
  UserHasBoard   UserHasBoard[]
  Card           Card[]
  CardAssignment CardAssignment[]
  pictureUrl     String
}

model Board {
  id           Int            @id @default(autoincrement())
  name         String
  UserHasBoard UserHasBoard[]
  Tag          Tag[]
  Column       Column[]
  LastEdited   String
  Color        String
}

model UserHasBoard {
  id      Int    @id @default(autoincrement())
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  user    User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  role    String
  boardId Int
  userId  Int
}

model Tag {
  id         Int          @id @default(autoincrement())
  name       String
  board      Board        @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId    Int
  color      String
  cardId     Int?
  CardHasTag CardHasTag[]
}

model Card {
  id             Int              @id @default(autoincrement())
  status         String?
  title          String
  content        String?
  startDate      String?
  endDate        String?
  List           List[]
  creator        User?            @relation(fields: [creatorId], references: [id])
  creatorId      Int?
  column         Column           @relation(fields: [columnId], references: [id], onDelete: Cascade)
  columnId       Int
  color          String
  CardAssignment CardAssignment[]
  CardHasTag     CardHasTag[]
}

model List {
  id       Int        @id @default(autoincrement())
  card     Card       @relation(fields: [cardId], references: [id], onDelete: Cascade)
  title    String
  cardId   Int
  ListItem ListItem[]
}

model ListItem {
  id      Int     @id @default(autoincrement())
  content String
  list    List    @relation(fields: [listId], references: [id], onDelete: Cascade)
  listId  Int
  status  Boolean
}

model Column {
  id      Int    @id @default(autoincrement())
  name    String
  board   Board  @relation(fields: [boardId], references: [id], onDelete: Cascade)
  boardId Int
  Card    Card[]
  order   Int
}

model CardAssignment {
  id     Int  @id @default(autoincrement())
  card   Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)
  cardId Int
  userId Int
}

model CardHasTag {
  id     Int  @id @default(autoincrement())
  card   Card @relation(fields: [cardId], references: [id], onDelete: Cascade)
  tag    Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)
  cardId Int
  tagId  Int
}
